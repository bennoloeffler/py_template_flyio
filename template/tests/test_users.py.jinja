"""
User profile management tests.

Tests for getting and updating user profiles.
All tests use unique email addresses to avoid conflicts.
"""

import random
import time

from fastapi.testclient import TestClient


def unique_email() -> str:
    """Generate unique email address for testing."""
    timestamp = int(time.time() * 1000)
    random_suffix = random.randint(1000, 9999)
    return f"test_{timestamp}_{random_suffix}@example.com"


def register_and_login(client: TestClient) -> tuple[str, str]:
    """
    Helper: Register a user and return (email, token).

    Returns:
        tuple: (email, access_token)
    """
    email = unique_email()
    password = "testpass123"

    # Register
    client.post(
        "/api/register",
        json={"email": email, "password": password, "full_name": "Test User"},
    )

    # Login
    response = client.post("/api/token", data={"username": email, "password": password})
    token = response.json()["access_token"]

    return email, token


class TestUserProfile:
    """Test user profile endpoints."""

    def test_get_current_user_profile(self, client: TestClient) -> None:
        """Test getting current user profile."""
        email, token = register_and_login(client)

        # Get profile
        response = client.get("/api/me", headers={"Authorization": f"Bearer {token}"})

        assert response.status_code == 200
        data = response.json()
        assert data["email"] == email
        assert data["full_name"] == "Test User"
        assert "id" in data
        assert "password" not in data

    def test_get_profile_without_auth_fails(self, client: TestClient) -> None:
        """Test getting profile without authentication fails."""
        response = client.get("/api/me")
        assert response.status_code == 401

    def test_update_user_profile_full_name(self, client: TestClient) -> None:
        """Test updating user's full name."""
        email, token = register_and_login(client)

        # Update profile
        response = client.put(
            "/api/me",
            headers={"Authorization": f"Bearer {token}"},
            json={"full_name": "Updated Name"},
        )

        assert response.status_code == 200
        data = response.json()
        assert data["full_name"] == "Updated Name"
        assert data["email"] == email  # Email shouldn't change

    def test_update_user_profile_company_name(self, client: TestClient) -> None:
        """Test updating user's company name."""
        email, token = register_and_login(client)

        # Update profile
        response = client.put(
            "/api/me",
            headers={"Authorization": f"Bearer {token}"},
            json={"company_name": "Test Company Inc"},
        )

        assert response.status_code == 200
        data = response.json()
        assert data["company_name"] == "Test Company Inc"
        assert data["email"] == email

    def test_update_user_profile_multiple_fields(self, client: TestClient) -> None:
        """Test updating multiple profile fields at once."""
        email, token = register_and_login(client)

        # Update multiple fields
        response = client.put(
            "/api/me",
            headers={"Authorization": f"Bearer {token}"},
            json={
                "full_name": "New Full Name",
                "company_name": "Test Company Ltd",
            },
        )

        assert response.status_code == 200
        data = response.json()
        assert data["full_name"] == "New Full Name"
        assert data["company_name"] == "Test Company Ltd"

    def test_update_profile_without_auth_fails(self, client: TestClient) -> None:
        """Test updating profile without authentication fails."""
        response = client.put("/api/me", json={"full_name": "Hacker"})
        assert response.status_code == 401
