

import asyncio
import os
from typing import Generator

import pytest
from fastapi.testclient import TestClient

from {{ module_name }}.config import settings
from {{ module_name }}.db import setup_database
from {{ module_name }}.main import app

# Ensure we use the test database for all tests
os.environ["DROP_TABLES_BEFORE_INIT"] = "true"


@pytest.fixture(scope="function")
def client() -> Generator[TestClient, None, None]:
    """Create a test client with test database."""
    # Use test database URL
    test_database_url = settings.database_test_url

    # Override settings to use test database
    original_database_url = settings.database_url
    settings.database_url = test_database_url

    # Setup test database using the existing event loop from pytest-asyncio
    loop = asyncio.get_event_loop()
    loop.run_until_complete(setup_database(test_database_url))

    # Create test client
    with TestClient(app) as test_client:
        yield test_client

    # Restore original settings
    settings.database_url = original_database_url


class TestCounterAPI:
    """Test counter API endpoints."""

    def test_get_counter_initial(self, client: TestClient) -> None:
        """Test getting initial counter value via API."""
        response = client.get("/api/counter")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 0
        assert "error" not in data

    def test_increment_counter(self, client: TestClient) -> None:
        """Test incrementing counter via API."""
        # First increment
        response = client.post("/api/counter/increment")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 1
        assert data["success"] is True

        # Second increment
        response = client.post("/api/counter/increment")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 2
        assert data["success"] is True

    def test_get_counter_after_increment(self, client: TestClient) -> None:
        """Test getting counter value after increments."""
        # Increment a few times
        for _ in range(3):
            client.post("/api/counter/increment")

        # Get current value
        response = client.get("/api/counter")
        assert response.status_code == 200
        data = response.json()
        assert data["count"] == 3


class TestBasicEndpoints:
    """Test basic API endpoints."""

    def test_health_check(self, client: TestClient) -> None:
        """Test health check endpoint."""
        response = client.get("/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        assert "timestamp" in data
        assert "version" in data
        assert "environment" in data

    def test_hello_endpoint(self, client: TestClient) -> None:
        """Test hello endpoint."""
        response = client.get("/hello")
        assert response.status_code == 200
        data = response.json()
        assert "message" in data
        assert "Hello from" in data["message"]

    def test_time_endpoint(self, client: TestClient) -> None:
        """Test time endpoint."""
        response = client.get("/time")
        assert response.status_code == 200
        data = response.json()
        assert "time" in data
        # Should be a valid ISO format timestamp
        from datetime import datetime

        datetime.fromisoformat(data["time"].replace("Z", "+00:00"))
