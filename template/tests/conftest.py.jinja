"""
Pytest configuration and shared fixtures.

This file provides fixtures that are shared across all test files:
- setup_test_database: Session-scoped fixture that drops tables ONCE at start
- client: Function-scoped fixture that provides TestClient for each test
"""

import os
from typing import Generator

import pytest
from fastapi.testclient import TestClient

from {{ module_name }}.config import settings
from {{ module_name }}.main import app


@pytest.fixture(scope="session", autouse=True)
def setup_test_database() -> Generator[None, None, None]:
    """
    Session-scoped fixture that runs ONCE at the start of the test session.

    This fixture:
    1. Sets DATABASE_URL to test database
    2. Sets DROP_TABLES_BEFORE_INIT=true to drop tables on first connection
    3. Yields (first test triggers database migration via setup_database)
    4. Cleans up environment variable on session end

    autouse=True means this runs automatically without being explicitly requested.
    """
    # Save original values
    original_db_url = settings.database_url
    original_drop_flag = os.environ.get("DROP_TABLES_BEFORE_INIT", "false")

    # Set test database and drop flag
    settings.database_url = settings.database_test_url
    os.environ["DROP_TABLES_BEFORE_INIT"] = "true"

    # Log what we're doing
    print(f"\n{'='*60}")
    print("TEST SESSION STARTING")
    print(f"Test Database: {settings.database_test_url}")
    print("DROP_TABLES_BEFORE_INIT=true (will drop tables on first connection)")
    print(f"{'='*60}\n")

    yield  # Tests run here

    # Cleanup
    os.environ["DROP_TABLES_BEFORE_INIT"] = original_drop_flag
    settings.database_url = original_db_url


@pytest.fixture(scope="session")
def client() -> Generator[TestClient, None, None]:
    """
    Session-scoped fixture providing FastAPI TestClient for all tests.

    This fixture:
    1. Depends on setup_test_database (ensures DB is set up)
    2. Creates TestClient ONCE per session (triggers migration)
    3. Yields client for all tests to share
    4. Cleans up at end of session

    All tests share the same client and database.
    This is fast and works because tests use unique IDs.
    """
    # Create test client ONCE for entire test session
    # This triggers migration and admin user creation once
    with TestClient(app) as test_client:
        yield test_client
