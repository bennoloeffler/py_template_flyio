from contextlib import asynccontextmanager
from datetime import datetime
from typing import Any, AsyncGenerator, Dict

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.templating import Jinja2Templates
from slowapi import Limiter
from slowapi.errors import RateLimitExceeded
from slowapi.util import get_remote_address
from starlette.responses import Response

from {{ module_name }}.config import settings
from {{ module_name }}.db import get_db, setup_database

# Initialize templates
templates = Jinja2Templates(directory="{{ module_name }}/html_templates")

# Initialize rate limiter
limiter = Limiter(key_func=get_remote_address)


@asynccontextmanager
async def lifespan(app: FastAPI) -> AsyncGenerator[None, None]:
    """Lifespan context manager for FastAPI startup and shutdown events."""
    # Startup
    await setup_database(settings.database_url)
    yield
    # Shutdown
    try:
        db = get_db()
        await db.disconnect()
    except Exception:
        # Handle case where db might not be initialized
        pass


# Create FastAPI app with configuration from settings and lifespan
app = FastAPI(
    title=settings.app_title,
    version=settings.app_version,
    description="...",
    debug=settings.debug,
    lifespan=lifespan,
)

# Add security headers and CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# Add rate limiter middleware
app.state.limiter = limiter


@app.exception_handler(RateLimitExceeded)
async def rate_limit_handler(request: Request, exc: RateLimitExceeded) -> Response:
    """Handle rate limit exceeded exceptions."""
    return Response("Rate limit exceeded", status_code=429)


@app.get("/")
def root(request: Request) -> Any:
    """Returns a styled HTML landing page."""
    context = {
        "title": settings.app_title,
        "description": "...",
        "environment": settings.environment,
        "version": settings.app_version,
        "features": [
            {
                "icon": "⚡",
                "name": "FastAPI",
                "description": "Modern, fast Python web framework",
            },
            {
                "icon": "🔒",
                "name": "Security",
                "description": "Rate limiting, CORS, security headers",
            },
            {
                "icon": "📊",
                "name": "Monitoring",
                "description": "Health checks and metrics",
            },
            {
                "icon": "🚀",
                "name": "Production Ready",
                "description": "Docker and Fly.io deployment",
            },
        ],
        "api_links": [
            {"icon": "📚", "name": "API Docs", "url": "/docs"},
            {"icon": "🏥", "name": "Health", "url": "/health"},
            {"icon": "👋", "name": "Hello", "url": "/hello"},
            {"icon": "🕐", "name": "Time", "url": "/time"},
            {"icon": "🔢", "name": "Counter", "url": "/counter"},
        ],
    }
    return templates.TemplateResponse("index.html", {"request": request, **context})


@app.get("/hello")
@limiter.limit("60/minute")
def hello_world(request: Request) -> Dict[str, str]:
    """Returns a hello world message."""
    return {"message": "Hello from {{ project_name }}!"}


@app.get("/time")
@limiter.limit("30/minute")
def get_time(request: Request) -> Dict[str, str]:
    """Returns the current server time in ISO format."""
    return {"time": datetime.now().isoformat()}


@app.get("/health")
@limiter.limit("10/minute")
def health_check(request: Request) -> Dict[str, Any]:
    """Health check endpoint for monitoring."""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": settings.app_version,
        "environment": settings.environment,
    }


@app.get("/counter")
async def counter_page(request: Request) -> Any:
    """Counter UI page."""
    return templates.TemplateResponse("counter.html", {"request": request})


@app.get("/api/counter")
async def get_counter(request: Request) -> Dict[str, Any]:
    """Get current counter value."""
    try:
        count = await get_db().get_count()
        return {"count": count}
    except Exception as e:
        return {"error": str(e), "count": 0}


@app.post("/api/counter/increment")
@limiter.limit("60/minute")
async def increment_counter(request: Request) -> Dict[str, Any]:
    """Increment counter and return new value."""
    try:
        new_count = await get_db().increment_count()
        return {"count": new_count, "success": True}
    except Exception as e:
        return {"error": str(e), "success": False}


def main() -> None:
    """Main entry point for the FastAPI application."""
    import uvicorn

    uvicorn.run(
        "{{ module_name }}.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        workers=1 if settings.debug else settings.workers,
    )


if __name__ == "__main__":
    main()


