"""
Configuration management for {{ project_name }}.

This module provides centralized configuration management using Pydantic BaseSettings.
All configuration is loaded from environment variables with sensible defaults.
"""

import os
from typing import List

from pydantic import Field
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    """Application settings with validation and defaults."""

    # Application
    app_title: str = "{{ project_name }}"
    app_version: str = Field(default="0.1.0", description="Application version")
    environment: str = Field(
        default="development",
        description="Environment mode (development/production)",
    )
    debug: bool = Field(default=False, description="Enable debug mode")

    # Server
    host: str = Field(default="0.0.0.0", description="Server host")
    port: int = Field(default=8000, description="Server port")
    workers: int = Field(default=1, description="Number of worker processes")

    # CORS
    allowed_origins: List[str] = Field(
        default=[
            "http://localhost:8000",
            "http://localhost:3000",
            "http://localhost:5173",
        ],
        description="List of allowed CORS origins",
    )


    # Database
    database_url: str = Field(
        default="postgresql://postgres:postgres@localhost/{{ module_name }}",
        description="Database connection string",
    )
    database_test_url: str = Field(
        default="postgresql://postgres:postgres@localhost/{{ module_name }}_test",
        description="Test database connection string",
    )

    # Security
    secret_key: str = Field(
        default="change-me-in-production-use-a-long-random-string",
        description="Secret key for JWT token encryption",
    )
    admin_password: str = Field(
        default="admin123",
        description="Default admin password (change in production!)",
    )

    # JWT Token Configuration
    access_token_expire_minutes: int = Field(
        default=43200,  # 30 days = 30 * 24 * 60 minutes
        description="JWT token expiration time in minutes (default: 30 days)",
    )
    token_refresh_threshold: float = Field(
        default=0.5,
        description="Refresh token when this fraction of lifetime has passed",
    )

    # File Upload Configuration
    max_file_size_mb: int = Field(
        default=10,
        description="Maximum file upload size in megabytes",
    )
    allowed_file_extensions: List[str] = Field(
        default=[
            ".jpg", ".jpeg", ".png", ".gif", ".webp", ".svg",
            ".pdf", ".txt", ".csv", ".doc", ".docx", ".xls", ".xlsx",
            ".zip", ".tar", ".gz", ".json", ".xml", ".html", ".md"
        ],
        description="Allowed file extensions for upload",
    )

    # Rate Limiting
    default_rate_limit: str = Field(
        default="100/minute",
        description="Default rate limit for endpoints",
    )
    health_rate_limit: str = Field(
        default="10/minute",
        description="Rate limit for health endpoint",
    )

    # External Services
    openai_api_key: str = Field(
        default="your-openai-key-here",
        description="OpenAI API key for AI features",
    )

    model_config = {
        "env_file": ".env",
        "env_file_encoding": "utf-8",
        "case_sensitive": False,
        "env_prefix": "",
    }


def get_settings() -> Settings:
    """Get application settings with source tracking."""
    settings = Settings()

    # Log configuration sources for debugging
    if settings.debug:
        print("=== Configuration Sources ===")
        for field_name, field_info in Settings.model_fields.items():
            env_var = field_name.upper()
            value = getattr(settings, field_name)

            # Check if value came from environment, .env file, or default
            if env_var in os.environ:
                source = f"shell environment variable '{env_var}'"
            elif os.path.exists(".env") and any(
                line.startswith(f"{env_var}=") for line in open(".env")
            ):
                source = ".env file"
            else:
                source = "default value"

            print(f"{field_name}: using value '{value}' from {source}")
        print("=== End Configuration ===")

    return settings


# Global settings instance
settings = get_settings()