"""
Configuration management for {{ project_name }}.

This module provides centralized configuration management using Pydantic BaseSettings.
All configuration is loaded from environment variables with sensible defaults.
"""

import logging
from typing import List

from pydantic import Field, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict

logger = logging.getLogger(__name__)


class Settings(BaseSettings):
    """Application settings with validation and defaults."""

    # Application
    app_version: str = Field(default="0.1.0", description="Application version")
    environment: str = Field(
        default="development",
        description="Environment mode (development/production)",
    )
    debug: bool = Field(default=False, description="Enable debug mode")

    # CORS
    allowed_origins: str | List[str] = Field(
        default="http://localhost:8000,http://localhost:3000,http://localhost:5173",
        description="Comma-separated list of allowed CORS origins",
    )

    @field_validator("allowed_origins", mode="before")
    @classmethod
    def parse_cors_origins(cls, v):
        """Parse CORS origins from comma-separated string or list."""
        if isinstance(v, str):
            return [origin.strip() for origin in v.split(",") if origin.strip()]
        return v

    # Database
    database_url: str = Field(
        default="postgresql://postgres:postgres@localhost/{{ module_name }}",
        description="Database connection string",
    )
    database_test_url: str = Field(
        default="postgresql://postgres:postgres@localhost/{{ module_name }}_test",
        description="Test database connection string",
    )

    # Security
    secret_key: str = Field(
        default="change-me-in-production-use-a-long-random-string",
        description="Secret key for JWT token encryption",
    )
    admin_password: str = Field(
        default="admin123",
        description="Default admin password (change in production!)",
    )

    # JWT Token Configuration
    access_token_expire_minutes: int = Field(
        default=43200,  # 30 days = 30 * 24 * 60 minutes
        description="JWT token expiration time in minutes (default: 30 days)",
    )

    # Rate Limiting
    default_rate_limit: str = Field(
        default="100/minute",
        description="Default rate limit for endpoints",
    )
    health_rate_limit: str = Field(
        default="10/minute",
        description="Rate limit for health endpoint",
    )

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        env_prefix="",
        # IMPORTANT: This makes .env override shell environment
        env_ignore_empty=True,
        extra="ignore",
    )

    @classmethod
    def settings_customise_sources(
        cls,
        settings_cls,
        init_settings,
        env_settings,
        dotenv_settings,
        file_secret_settings,
    ):
        """
        Customize settings sources priority.
        Order (first wins):
        1. init_settings (constructor args)
        2. dotenv_settings (.env file) - MOVED UP!
        3. env_settings (shell environment) - MOVED DOWN!
        4. file_secret_settings (secrets files)

        This makes .env file override shell environment variables.
        """
        return (
            init_settings,
            dotenv_settings,  # .env file now takes precedence
            env_settings,  # Shell env variables come after .env
            file_secret_settings,
        )


def get_settings() -> Settings:
    """Get application settings with source tracking."""
    # No need to manually load dotenv since pydantic-settings handles it
    # with our custom settings_customise_sources method
    settings = Settings()
    return settings


# Global settings instance
settings = get_settings()
