"""
Data models and schemas for {{ project_name }}.

This module defines all Pydantic models for request/response validation,
database models, and business logic entities.
"""

from datetime import date
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, EmailStr, Field


class UserRole(str, Enum):
    """User roles for authorization."""

    ADMIN = "admin"
    USER = "user"
    VISITOR = "visitor"  # Can only view/download files


class UserStatus(str, Enum):
    """User account status."""

    ACTIVE = "active"
    INACTIVE = "inactive"
    PENDING = "pending"  # Email verification pending


class UserBase(BaseModel):
    """Base user model with common fields."""

    email: EmailStr = Field(..., description="User email (unique identifier)")
    role: UserRole = Field(default=UserRole.USER, description="User role")
    status: UserStatus = Field(default=UserStatus.ACTIVE, description="Account status")
    full_name: Optional[str] = Field(None, max_length=200, description="Full name")
    company_name: Optional[str] = Field(None, max_length=200, description="Company/Organization")


class UserCreate(UserBase):
    """Schema for creating a new user."""

    password: str = Field(
        ...,
        min_length=8,
        max_length=100,
        description="User password (will be hashed)"
    )


class UserUpdate(BaseModel):
    """Schema for updating a user."""

    email: Optional[EmailStr] = None
    full_name: Optional[str] = Field(None, max_length=200)
    company_name: Optional[str] = Field(None, max_length=200)
    password: Optional[str] = Field(None, min_length=8, max_length=100)


class UserPublic(UserBase):
    """Public user information (without sensitive data)."""

    id: int = Field(..., description="Unique user ID")
    created_at: str = Field(..., description="Account creation timestamp")
    file_count: Optional[int] = Field(None, description="Number of files uploaded")


class UserInDB(UserBase):
    """User model as stored in database."""

    id: int
    password_hash: str
    created_at: str
    updated_at: str


# Authentication Models

class LoginRequest(BaseModel):
    """Login request with email and password."""

    email: EmailStr = Field(..., description="Email for login")
    password: str = Field(..., description="Password for login")


class Token(BaseModel):
    """JWT token response."""

    access_token: str = Field(..., description="JWT access token")
    token_type: str = Field(default="bearer", description="Token type")


class TokenData(BaseModel):
    """Data stored in JWT token."""

    email: Optional[str] = Field(None, description="Email from token")
    role: Optional[UserRole] = Field(None, description="User role from token")


# File Models

class FileInfo(BaseModel):
    """File metadata for API responses."""

    id: int = Field(..., description="Unique file ID")
    filename: str = Field(..., description="Unique filename in system")
    original_filename: str = Field(..., description="Original uploaded filename")
    content_type: str = Field(..., description="MIME type")
    file_size: int = Field(..., description="File size in bytes")
    uploaded_by: Optional[int] = Field(None, description="User ID of uploader")
    uploaded_by_email: Optional[str] = Field(None, description="Email of uploader")
    created_at: str = Field(..., description="Upload timestamp")
    download_url: str = Field(..., description="Public download URL")
    thumbnail_url: Optional[str] = Field(None, description="Thumbnail URL for images")


class FileUploadResponse(BaseModel):
    """Response after successful file upload."""

    success: bool = Field(..., description="Upload success status")
    file_id: int = Field(..., description="Unique file ID")
    filename: str = Field(..., description="System filename")
    download_url: str = Field(..., description="Public download URL")
    file_size: int = Field(..., description="File size in bytes")
    message: str = Field(..., description="Success message")
    thumbnail_url: Optional[str] = Field(None, description="Thumbnail URL for images")


class FileListResponse(BaseModel):
    """Response for file listing with pagination."""

    files: List[FileInfo] = Field(..., description="List of files")
    total: int = Field(..., description="Total number of files")
    page: int = Field(..., description="Current page (1-based)")
    per_page: int = Field(..., description="Items per page")
    pages: int = Field(..., description="Total number of pages")


# Request/Response Models

class MessageResponse(BaseModel):
    """Generic message response."""

    message: str = Field(..., description="Response message")
    success: bool = Field(default=True, description="Operation success status")


class ErrorResponse(BaseModel):
    """Error response model."""

    error: str = Field(..., description="Error message")
    detail: Optional[str] = Field(None, description="Detailed error information")
    status_code: int = Field(..., description="HTTP status code")


class HealthResponse(BaseModel):
    """Health check response."""

    status: str = Field(default="healthy", description="Service status")
    version: str = Field(..., description="Application version")
    environment: str = Field(..., description="Environment (development/production)")