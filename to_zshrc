# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=~/.local/bin:$PATH
export PATH="/Applications/Postgres.app/Contents/Versions/latest/bin":$PATH

export PYTHONPATH=.

export CHROME_PATH="/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"

# Examples... for local development that may be different on fly.io
export DATABASE_URL=postgres://user:@localhost:5432/a_database
export DB_FOLDER="./data"
export ADMIN_PASSWORD="a_password"


alias e="code"
alias ez="code ~/.zshrc"
alias cz="code ~/.zshrc"
alias sz="source ~/.zshrc"

alias c.="code ."
alias c="code "


alias o="open"
alias xdg-open="open"
#alias v="dvtm"
alias t="trash -v"

alias ls='eza --icons'
alias ll='ls --long -h'
alias la="ll --all"
alias lt='eza --tree --long --level=2'
alias lt2='eza --tree --long --level=2'
alias lt3='eza --tree --long --level=3'
alias lt4='eza --tree --long --level=4'


alias f='ofd'

eval $(thefuck --alias)


unalias z 2> /dev/null
z() {
    [ $# -gt 0 ] && _z "$*" && return
    cd "$(_z -l 2>&1 | fzf --height 40% --nth 2.. --reverse --inline-info +s --tac --query "${*##-* }" | sed 's/^[0-9,.]* *//')"
}

#alias -g F=' $(fzf)'


export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"


export FZF_DEFAULT_COMMAND='fd --type f --color=never --hidden'
export FZF_DEFAULT_OPTS='--height=80% --border --color=bg+:#343d46,gutter:-1,pointer:#ff3c3c,info:#0dbc79,hl:#0dbc79,hl+:#23d18b'

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview 'bat --color=always --line-range :500 {}'"

# ATTENTION ALT-C does not work. BUT ESC-C does!
export FZF_ALT_C_COMMAND="fd --type d . --color=never --hidden"
export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -50'"
export FZF_PREVIEW_WINDOW='right:65%:nohidden'

source ~/.fzf.zsh


eval "$(uv generate-shell-completion zsh)"


killport() {
  if [ -z "$1" ]; then
    echo "Usage: killport <port>"
    return 1
  fi
  kill -9 $(lsof -t -i :$1)
}


export PY_TEMPLATE=https://github.com/bennoloeffler/py_template_flyio.git

# A function to run copier and then cd into the new directory

newp(){
  local template_url=""
  local destination_folder=""
  local vcs_ref="HEAD"
  local show_help=false
  local show_refs=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --vcs-ref)
        if [[ -n "$2" && "$2" != "--vcs-ref" ]]; then
          vcs_ref="$2"
          shift 2
        else
          echo "Error: --vcs-ref requires a value"
          return 1
        fi
        ;;
      --vcs-ref=*)
        vcs_ref="${1#*=}"
        shift
        ;;
      --list|-l)
        show_refs=true
        shift
        ;;
      --help|-h)
        show_help=true
        shift
        ;;
      *)
        if [[ -z "$template_url" ]]; then
          template_url="$1"
        elif [[ -z "$destination_folder" ]]; then
          destination_folder="$1"
        fi
        shift
        ;;
    esac
  done

  # Show help if requested
  if [[ "$show_help" == true ]]; then
    echo "Usage: newp <template_url> <destination_folder> [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --vcs-ref REF    Use specific git reference (tag, branch, commit)"
    echo "  --list, -l       Show available git references (tags/branches)"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "Examples:"
    echo "  newp $PY_TEMPLATE myapp                    # uses HEAD"
    echo "  newp $PY_TEMPLATE myapp --vcs-ref main     # uses main branch"
    echo "  newp $PY_TEMPLATE --list                   # show available refs"
    echo "  newpy myapp --vcs-ref v1.0.0              # use newpy shortcut"
    return 0
  fi

  # Show available git refs if requested
  if [[ "$show_refs" == true ]]; then
    if [[ -z "$template_url" ]]; then
      echo "Error: --list requires a template URL"
      echo "Usage: newp <template_url> --list"
      return 1
    fi
    
    echo "Available git references for $template_url:"
    echo ""
    echo "  --vcs-ref REF    Use specific git reference (tag, branch, commit)"
    echo ""
    echo "Tags:"
    git ls-remote --tags "$template_url" 2>/dev/null | awk '{print "  " $2}' | sed 's|refs/tags/||' | sort -V
    echo ""
    echo "Branches:"
    git ls-remote --heads "$template_url" 2>/dev/null | awk '{print "  " $2}' | sed 's|refs/heads/||' | sort
    echo ""
    echo "Recent commits (SHA):"
    git ls-remote "$template_url" HEAD 2>/dev/null | awk '{print "  " $1 " (HEAD)"}'
    return 0
  fi

  # Validate arguments
  if [[ -z "$template_url" || -z "$destination_folder" ]]; then
    echo "Usage: newp <template_url> <destination_folder> [OPTIONS]"
    echo ""
    echo "Use 'newp --help' for more information"
    echo ""
    echo "for py web app, use template: $PY_TEMPLATE"
    echo "or just call: newpy <destination-folder>"
    return 1
  fi

  echo "--> Attempting to copy template into '$destination_folder'..."
  echo "--> Using vcs-ref: $vcs_ref"

  # Run copier command
  if copier copy "$template_url" "$destination_folder" --vcs-ref "$vcs_ref" --trust; then
    echo "✅ Copier finished successfully. Changing directory."
    cd "$destination_folder"
    source .venv/bin/activate
    code .
  else
    echo "❌ ERROR: Copier command failed. See error message above."
    echo "Directory was NOT changed."
    return 1
  fi
}


newpy(){
  local destination_folder=""
  local vcs_ref="HEAD"
  local show_help=false
  local show_refs=false
  
  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --vcs-ref)
        if [[ -n "$2" && "$2" != "--vcs-ref" ]]; then
          vcs_ref="$2"
          shift 2
        else
          echo "Error: --vcs-ref requires a value"
          return 1
        fi
        ;;
      --vcs-ref=*)
        vcs_ref="${1#*=}"
        shift
        ;;
      --list|-l)
        show_refs=true
        shift
        ;;
      --help|-h)
        show_help=true
        shift
        ;;
      *)
        if [[ -z "$destination_folder" ]]; then
          destination_folder="$1"
        fi
        shift
        ;;
    esac
  done

  # Show help if requested
  if [[ "$show_help" == true ]]; then
    echo "Usage: newpy <destination_folder> [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  --vcs-ref REF    Use specific git reference (tag, branch, commit)"
    echo "  --list, -l       Show available git references (tags/branches)"
    echo "  --help, -h       Show this help message"
    echo ""
    echo "Examples:"
    echo "  newpy myapp                    # uses HEAD"
    echo "  newpy myapp --vcs-ref main     # uses main branch"
    echo "  newpy --list                   # show available refs"
    return 0
  fi

  # Show available git refs if requested
  if [[ "$show_refs" == true ]]; then
    echo "Available git references for $PY_TEMPLATE:"
    echo ""
    echo "  --vcs-ref REF    Use specific git reference (tag, branch, commit)"
    echo ""
    echo "Tags:"
    git ls-remote --tags "$PY_TEMPLATE" 2>/dev/null | awk '{print "  " $2}' | sed 's|refs/tags/||' | sort -V
    echo ""
    echo "Branches:"
    git ls-remote --heads "$PY_TEMPLATE" 2>/dev/null | awk '{print "  " $2}' | sed 's|refs/heads/||' | sort
    echo ""
    echo "Recent commits (SHA):"
    git ls-remote "$PY_TEMPLATE" HEAD 2>/dev/null | awk '{print "  " $1 " (HEAD)"}'
    return 0
  fi

  # Validate arguments
  if [[ -z "$destination_folder" ]]; then
    echo "Usage: newpy <destination_folder> [OPTIONS]"
    echo ""
    echo "Use 'newpy --help' for more information"
    echo ""
    echo "this template will be used: $PY_TEMPLATE"
    return 1
  fi

  # Pass all arguments to newp
  newp "$PY_TEMPLATE" "$destination_folder" --vcs-ref "$vcs_ref"
}
